{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { properties } from 'src/assets/properties/properties';\nimport { ConstantUri } from '../../utils/constantUri';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../service/api.service\";\nimport * as i3 from \"primeng/inputtext\";\nimport * as i4 from \"primeng/password\";\nimport * as i5 from \"primeng/button\";\nexport class LoginComponent {\n  constructor(fb, ApiService) {\n    this.fb = fb;\n    this.ApiService = ApiService;\n    // value1 !: string;          // ! este signo omite la inicializacion de la variable\n    this.logo = properties.logo;\n    this.formLogin = new FormGroup({});\n  }\n  ngOnInit() {\n    this.formLogin = this.fb.group({\n      username: ['', Validators.required, Validators.min, Validators.max],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    if (this.formLogin.invalid) {\n      this.formLogin.markAllAsTouched();\n      for (const key in this.formLogin.controls) {\n        //console.log(key);\n        this.formLogin.controls[key].markAsDirty();\n      }\n      return;\n    }\n    const {\n      username,\n      password\n    } = this.formLogin.value;\n    const body = {\n      username,\n      password,\n      \"request_token\": sessionStorage.getItem('requestToken') //clave de la api\n    };\n\n    const configPost = {\n      url: ConstantUri.validateWitheLogin,\n      params: {\n        api_key: ConstantUri.apikey\n      },\n      body\n    };\n    this.ApiService.postService(configPost).subscribe(val => {\n      console.log(val);\n    });\n    console.log(this.formLogin.value);\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[1, \"tituloempresa\"], [1, \"d-flex\", \"aling-item-center\", \"justify-content-center\"], [3, \"formGroup\"], [1, \"row\", \"mt-4\", \"text-center\"], [1, \"col-12\"], [\"alt\", \"Logo\", 1, \"logo\", 3, \"src\"], [\"type\", \"text\", \"placeholder\", \"Username\", \"pInputText\", \"\", \"formControlName\", \"username\", \"name\", \"username\", \"autocomplete\", \"off\"], [\"mt-2\", \"\", 1, \"col-12\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"pPassword\", \"\", \"formControlName\", \"username\", \"id\", \"inputPass\", 3, \"feedback\"], [\"pButton\", \"\", \"type\", \"button\", \"label\", \"Iniciar sesi\\u00F3n\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"h1\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"section\", 1)(3, \"form\", 2)(4, \"div\", 3)(5, \"div\", 4);\n      i0.ɵɵelement(6, \"img\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelement(8, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 7);\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.formLogin);\n      i0.ɵɵadvance(3);\n      i0.ɵɵpropertyInterpolate(\"src\", ctx.logo, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"feedback\", false);\n    }\n  },\n  dependencies: [i3.InputText, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i4.PasswordDirective, i5.ButtonDirective, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"*[_ngcontent-%COMP%] {\\n    margin: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiKiB7XG4gICAgbWFyZ2luOiA1cHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,UAAU,QAAQ,kCAAkC;AAE7D,SAASC,WAAW,QAAQ,yBAAyB;;;;;;;AAOrD,OAAM,MAAOC,cAAc;EAKzBC,YACUC,EAAe,EACNC,UAA2B;IADpC,OAAE,GAAFD,EAAE;IACO,eAAU,GAAVC,UAAU;IAN9B;IACC,SAAI,GAAGL,UAAU,CAACM,IAAI;IACtB,cAAS,GAAc,IAAIR,SAAS,CAAC,EAAE,CAAC;EAOxC;EAEAS,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,GAAG,EAAEb,UAAU,CAACc,GAAG,CAAC;MACnEC,QAAQ,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ;KACnC,CAAC;EACJ;EAEAI,KAAK;IACH,IAAG,IAAI,CAACP,SAAS,CAACQ,OAAO,EAAE;MACzB,IAAI,CAACR,SAAS,CAACS,gBAAgB,EAAE;MACjC,KAAI,MAAMC,GAAG,IAAI,IAAI,CAACV,SAAS,CAACW,QAAQ,EAAE;QACxC;QACA,IAAI,CAACX,SAAS,CAACW,QAAQ,CAACD,GAAG,CAAC,CAACE,WAAW,EAAE;;MAE5C;;IAIF,MAAM;MAAEV,QAAQ;MAAEI;IAAQ,CAAE,GAAG,IAAI,CAACN,SAAS,CAACa,KAAK;IACnD,MAAMC,IAAI,GAAG;MACXZ,QAAQ;MACRI,QAAQ;MACR,eAAe,EAAES,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,CAAE;KAC1D;;IAED,MAAMC,UAAU,GAAG;MAAEC,GAAG,EAAEzB,WAAW,CAAC0B,kBAAkB;MAAEC,MAAM,EAAE;QAACC,OAAO,EAAE5B,WAAW,CAAC6B;MAAM,CAAC;MAAER;IAAI,CAAE;IACvG,IAAI,CAACjB,UAAU,CAAC0B,WAAW,CAACN,UAAU,CAAC,CAACO,SAAS,CAACC,GAAG,IAAG;MACtDC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,SAAS,CAACa,KAAK,CAAC;EACnC;;AA3CWnB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAkC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BC,8BAA2B;MACzBA,qBAAS;MACXA,iBAAM;MACNA,kCAAiE;MAIzDA,yBAA8C;MAChDA,iBAAM;MACNA,8BAAoB;MAClBA,2BAAqH;MACvHA,iBAAM;MACNA,8BAAyB;MACvBA,4BAAuH;MACzHA,iBAAM;MACNA,+BAAyB;MAC8BA;QAAA,OAASC,WAAO;MAAA,EAAC;MAACD,iBAAS;;;MAZhFA,eAAuB;MAAvBA,yCAAuB;MAGlBA,eAAgB;MAAhBA,2DAAgB;MAMmCA,eAAkB;MAAlBA,gCAAkB","names":["FormGroup","Validators","properties","ConstantUri","LoginComponent","constructor","fb","ApiService","logo","ngOnInit","formLogin","group","username","required","min","max","password","login","invalid","markAllAsTouched","key","controls","markAsDirty","value","body","sessionStorage","getItem","configPost","url","validateWitheLogin","params","api_key","apikey","postService","subscribe","val","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Toño\\Desktop\\segundocorte\\MorePopullarMovies\\src\\app\\modules\\login\\login.component.ts","C:\\Users\\Toño\\Desktop\\segundocorte\\MorePopullarMovies\\src\\app\\modules\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { properties } from 'src/assets/properties/properties';\nimport { ApiService } from '../../service/api.service';\nimport { ConstantUri } from '../../utils/constantUri';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n // value1 !: string;          // ! este signo omite la inicializacion de la variable\n  logo = properties.logo;\n  formLogin: FormGroup = new FormGroup({});\n\n  constructor(\n    private fb: FormBuilder,\n    private readonly ApiService: ApiService<any>\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.formLogin = this.fb.group({\n      username: ['', Validators.required, Validators.min, Validators.max],\n      password: ['', Validators.required],\n    });\n  }\n\n  login() {\n    if(this.formLogin.invalid) {\n      this.formLogin.markAllAsTouched();\n      for(const key in this.formLogin.controls) {\n        //console.log(key);\n        this.formLogin.controls[key].markAsDirty();\n      }\n      return;\n    }\n\n\n    const { username, password } = this.formLogin.value;\n    const body = {\n      username,\n      password,\n      \"request_token\": sessionStorage.getItem('requestToken')  //clave de la api\n    }\n\n    const configPost = { url: ConstantUri.validateWitheLogin, params: {api_key: ConstantUri.apikey}, body };\n    this.ApiService.postService(configPost).subscribe(val => {\n      console.log(val);\n    });\n\n    console.log(this.formLogin.value)\n  }\n}\n","<div class=\"tituloempresa\">\n  <h1></h1>\n</div>\n<section class=\"d-flex aling-item-center justify-content-center\">\n  <form [formGroup]=\"formLogin\">\n    <div class=\"row mt-4 text-center\">\n      <div class=\"col-12\">\n        <img src=\"{{ logo }}\" alt=\"Logo\" class=\"logo\">\n      </div>\n      <div class=\"col-12\">\n        <input type=\"text\" placeholder=\"Username\" pInputText formControlName=\"username\" name = \"username\" autocomplete=\"off\">\n      </div>\n      <div class=\"col-12\" mt-2>\n        <input type=\"password\" placeholder=\"Password\" pPassword [feedback]=\"false\" formControlName=\"username\" id=\"inputPass\" />\n      </div>\n      <div class=\"col-12\" mt-2>\n        <button pButton type=\"button\" label=\"Iniciar sesión\" (click)=\"login()\"></button>\n      </div>\n    </div>\n  </form>\n</section>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}